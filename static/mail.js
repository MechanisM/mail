// Generated by CoffeeScript 1.3.3
(function() {
  var Application, Email, EmailCollection, EmailView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Email = (function(_super) {

    __extends(Email, _super);

    function Email() {
      return Email.__super__.constructor.apply(this, arguments);
    }

    Email.prototype.from = function() {
      return Mail.escapeEmailAddress(this.get('from'));
    };

    Email.prototype.body = function() {
      var body;
      body = this.get('body');
      if (body.html) {
        return body.html;
      } else {
        return body.plain;
      }
    };

    return Email;

  })(Backbone.Model);

  EmailCollection = (function(_super) {

    __extends(EmailCollection, _super);

    function EmailCollection() {
      return EmailCollection.__super__.constructor.apply(this, arguments);
    }

    EmailCollection.prototype.model = Email;

    EmailCollection.prototype.url = '/inbox/all';

    EmailCollection.prototype.parse = function(response) {
      return response.messages;
    };

    return EmailCollection;

  })(Backbone.Collection);

  EmailView = (function(_super) {

    __extends(EmailView, _super);

    function EmailView() {
      return EmailView.__super__.constructor.apply(this, arguments);
    }

    EmailView.prototype.className = 'message';

    EmailView.prototype.events = {
      'click span': 'toggleBody'
    };

    EmailView.prototype.toggleBody = function() {
      return this.$el.find('.body').toggle();
    };

    EmailView.prototype.render = function() {
      this.$el.html("<span>\n    <strong>" + (this.model.get('subject')) + "</strong>\n    - " + (this.model.from()) + "\n    </span>\n<div class=\"body\">\n" + (this.model.body()) + "\n</div>");
      return this.$el;
    };

    return EmailView;

  })(Backbone.View);

  Application = (function(_super) {

    __extends(Application, _super);

    function Application() {
      return Application.__super__.constructor.apply(this, arguments);
    }

    Application.prototype.initialize = function() {
      this.$messages = $('#messages');
      this.inbox = new EmailCollection;
      this.inbox.on('reset', this.renderInbox, this);
      return this.inbox.fetch();
    };

    Application.prototype.renderInbox = function() {
      var email, view, _i, _len, _ref, _results;
      _ref = this.inbox.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        email = _ref[_i];
        view = new EmailView({
          model: email
        });
        _results.push(this.$messages.append(view.render()));
      }
      return _results;
    };

    return Application;

  })(Backbone.View);

  $(function() {
    return Mail.app = new Application;
  });

}).call(this);
